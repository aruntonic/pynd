{
    "docs": [
        {
            "location": "/",
            "text": "pynd - search within Python code\n\u00b6\n\n\nYou say it like find, but with a p. pind.\n\n\nInstallation\n\u00b6\n\n\nWe recommend installation with pip.\n\n\n$ pip install pynd\n$ pynd -h\n\n\n\n\n\n\n\nWarning\n\n\npynd is in very early stages of development. Almost anything could change\nwithout warning. You have been warned ;-)\n\n\n\n\nWhat & Why?\n\u00b6\n\n\nPynd is a bit like grep, but it understand Python syntax. This means you can\ndo things like search within docstrings only or list and search function names.\n\n\nUsage Examples\n\u00b6\n\n\nListing and searching within Python\n\u00b6\n\n\nList all the Python classes in every Python file under the current working\ndirectory.\n\n\n$ pynd --class\n./pynd/astutils.py\n22:class ASTWalker(object):\n\n./pynd/filters.py\n20:class NodeTypeFilter(object):\n85:class DocString(NodeTypeFilter):\n109:class NameFilter(NodeTypeFilter):\n\n\n\n\n\nFind all classes that match a pattern.\n\n\n$ pynd AST --class\n./pynd/astutils.py\n22:class ASTWalker(object):\n\n\n\n\n\nThe \n--class\n argument can be replaced or used in combination with other node\ntypes. For example, find all functions or classes that contain the word \ntest\n.\n\n\n$ pynd filter --class --def --ignore-case\n./pynd/filters.py\n20:class NodeTypeFilter(object):\n109:class NameFilter(NodeTypeFilter):\n121:def get_all_filters():\n136:def get_active_filters(args):\n\n\n\n\n\nDocstrings\n\u00b6\n\n\nSearching within docstrings is simple with pynd. It works in a similar way\nas the other node matches, but it will output the full docstring and the \nclass or function that it is attached to.\n\n\n$ pynd TODO --doc\n./pynd/filters.py\n103:    def get_source(self, path, node):\nGet the source line for a particular node.\n\nTODO: Strippng the last line here is a hack - how should we do it\nproperly?\n\n\n\n\n\nThe above search will find all docstrings that contain TODO. If no term is \nprovided, then all docstrings will be displayed.\n\n\nSupported Node Types\n\u00b6\n\n\npynd currently supports the following node types.\n\n\n\n\n--class\n - Matches classes.\n\n\n--def\n - All function definitions.\n\n\n--import\n - matches import statements\n\n\n--doc\n - matches within docstrings\n\n\n\n\nShow full usage\n\u00b6\n\n\n$ pynd -h\nusage: pynd [-h] [--ignore-dir [IGNORE_DIR [IGNORE_DIR ...]]] [--verbose]\n            [--debug] [--ignore-case] [--files-with-matches] [-d] [-c] [-f]\n            [-i]\n            [PATTERN] [FILES OR DIRECTORIES [FILES OR DIRECTORIES ...]]\n\nSearch for PATTERN in each Python file in filesystem from the current\ndirectory down. If any files or directories are specified then only those are\nchecked.\n\npositional arguments:\n  PATTERN               The pattern to match against. This must be a valid\n                        Python regular expression.\n  FILES OR DIRECTORIES  A file or directory to limit the search scope. This\n                        can be provided multiple times.\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --ignore-dir [IGNORE_DIR [IGNORE_DIR ...]]\n                        A pattern to exclude directories. This must be a valid\n                        Python regular expression. It can be provided multiple\n                        times.\n  --verbose             Explain what is happening.\n  --debug               Output excessively to make debugging easier\n  --ignore-case         Make all the regular expression matching case\n                        insesitive.\n  --files-with-matches  Don't output all the results, just the paths to files\n                        that contain a result.\n  -d, --doc             Match class and function docstrings.\n  -c, --class           Match class names.\n  -f, --def             Match function names.\n  -i, --import          Match imported package names.",
            "title": "Home"
        },
        {
            "location": "/#pynd-search-within-python-code",
            "text": "You say it like find, but with a p. pind.",
            "title": "pynd - search within Python code"
        },
        {
            "location": "/#installation",
            "text": "We recommend installation with pip.  $ pip install pynd\n$ pynd -h   Warning  pynd is in very early stages of development. Almost anything could change\nwithout warning. You have been warned ;-)",
            "title": "Installation"
        },
        {
            "location": "/#what-why",
            "text": "Pynd is a bit like grep, but it understand Python syntax. This means you can\ndo things like search within docstrings only or list and search function names.",
            "title": "What &amp; Why?"
        },
        {
            "location": "/#usage-examples",
            "text": "",
            "title": "Usage Examples"
        },
        {
            "location": "/#listing-and-searching-within-python",
            "text": "List all the Python classes in every Python file under the current working\ndirectory.  $ pynd --class\n./pynd/astutils.py\n22:class ASTWalker(object):\n\n./pynd/filters.py\n20:class NodeTypeFilter(object):\n85:class DocString(NodeTypeFilter):\n109:class NameFilter(NodeTypeFilter):  Find all classes that match a pattern.  $ pynd AST --class\n./pynd/astutils.py\n22:class ASTWalker(object):  The  --class  argument can be replaced or used in combination with other node\ntypes. For example, find all functions or classes that contain the word  test .  $ pynd filter --class --def --ignore-case\n./pynd/filters.py\n20:class NodeTypeFilter(object):\n109:class NameFilter(NodeTypeFilter):\n121:def get_all_filters():\n136:def get_active_filters(args):",
            "title": "Listing and searching within Python"
        },
        {
            "location": "/#docstrings",
            "text": "Searching within docstrings is simple with pynd. It works in a similar way\nas the other node matches, but it will output the full docstring and the \nclass or function that it is attached to.  $ pynd TODO --doc\n./pynd/filters.py\n103:    def get_source(self, path, node):\nGet the source line for a particular node.\n\nTODO: Strippng the last line here is a hack - how should we do it\nproperly?  The above search will find all docstrings that contain TODO. If no term is \nprovided, then all docstrings will be displayed.",
            "title": "Docstrings"
        },
        {
            "location": "/#supported-node-types",
            "text": "pynd currently supports the following node types.   --class  - Matches classes.  --def  - All function definitions.  --import  - matches import statements  --doc  - matches within docstrings",
            "title": "Supported Node Types"
        },
        {
            "location": "/#show-full-usage",
            "text": "$ pynd -h\nusage: pynd [-h] [--ignore-dir [IGNORE_DIR [IGNORE_DIR ...]]] [--verbose]\n            [--debug] [--ignore-case] [--files-with-matches] [-d] [-c] [-f]\n            [-i]\n            [PATTERN] [FILES OR DIRECTORIES [FILES OR DIRECTORIES ...]]\n\nSearch for PATTERN in each Python file in filesystem from the current\ndirectory down. If any files or directories are specified then only those are\nchecked.\n\npositional arguments:\n  PATTERN               The pattern to match against. This must be a valid\n                        Python regular expression.\n  FILES OR DIRECTORIES  A file or directory to limit the search scope. This\n                        can be provided multiple times.\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --ignore-dir [IGNORE_DIR [IGNORE_DIR ...]]\n                        A pattern to exclude directories. This must be a valid\n                        Python regular expression. It can be provided multiple\n                        times.\n  --verbose             Explain what is happening.\n  --debug               Output excessively to make debugging easier\n  --ignore-case         Make all the regular expression matching case\n                        insesitive.\n  --files-with-matches  Don't output all the results, just the paths to files\n                        that contain a result.\n  -d, --doc             Match class and function docstrings.\n  -c, --class           Match class names.\n  -f, --def             Match function names.\n  -i, --import          Match imported package names.",
            "title": "Show full usage"
        }
    ]
}